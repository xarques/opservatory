name: "Create a public S3 bucket"
description: |
  Your code must allow a browser-based application for creating photo albums in an Amazon S3 bucket into which you can upload photos.
  The application lets you delete photos and albums that you add
instructions: |
  <p>The S3 bucket must have the following features:</p>
  <ol>
    <li>The bucket name must start with "opservatory-s3-"</li>
    <li>The bucket must have a Public Read Write Access</li>
    <li>The bucket must enable Cross-Origin Resource Sharing (CORS) for:
    <ul>
      <li>methods POST, GET, PUT, DELETE and HEAD</li>
      <li>any header</li>
      <li>any origin</li>
    </ul>
  </ol>
schema: |
  {
    "properties": {
      "Resources": {
        "description": "Template resources",
        "type": "object",
        "patternProperties": {
          "^[a-zA-Z0-9]+$": {
            "type": "object",
            "properties": {
              "Type": {
                "type": "string",
                "enum": ["AWS::S3::Bucket"]
              },
              "Properties": {
                "type": "object",
                "properties": {
                  "BucketName": {
                    "type": "string",
                    "pattern": "^opservatory-s3-[a-zA-Z0-9-]+$"
                  },
                  "AccessControl": {
                    "type": "string",
                    "enum": ["PublicReadWrite"]
                  },
                  "CorsConfiguration": {
                    "type": "object",
                    "properties": {
                      "CorsRules": {
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 1,
                        "items": {
                          "type": "object",
                          "properties": {
                            "AllowedHeaders" : {
                              "type": "array",
                              "minItems": 1,
                              "maxItems": 1,
                              "items": {
                                "type": "string",
                                "enum": ["*"]
                              },
                              "additionalItems": false
                            },
                            "AllowedMethods" : {
                              "type": "array",
                              "minItems": 5,
                              "maxItems": 5,
                              "uniqueItems": true,
                              "items": {
                                "type": "string",
                                "enum": ["POST", "GET", "PUT", "DELETE", "HEAD"]
                              },
                              "additionalItems": false
                            },
                            "AllowedOrigins" : {
                              "type": "array",
                              "minItems": 1,
                              "maxItems": 1,
                              "items": {
                                "type": "string",
                                "enum": ["*"]
                              },
                              "additionalItems": false
                            }
                          },
                          "required": ["AllowedHeaders", "AllowedMethods", "AllowedOrigins"],
                          "additionalProperties": false
                        },
                        "additionalItems": false
                      }
                    },
                    "required": ["CorsRules"],
                    "additionalProperties": false
                  }
                },
                "required": ["BucketName","AccessControl", "CorsConfiguration"],
                "additionalProperties": false
              }
            },
            "required": ["Type", "Properties"],
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    },
    "required": ["Resources"],
    "additionalProperties": false
  }
solution: |
  {
    "Resources" : {
      "publicS3" : {
        "Type" : "AWS::S3::Bucket",
        "Properties" : {
          "BucketName" : "opservatory-s3-public-bucket",
          "AccessControl" : "PublicReadWrite",
          "CorsConfiguration" : {
            "CorsRules" : [
              {
                "AllowedHeaders" : [ "*" ],
                "AllowedMethods" : [ "POST", "GET", "PUT", "DELETE", "HEAD" ],
                "AllowedOrigins" : [ "*" ]
              }
            ]
          }
        }
      }
    }
  }
hints:
  - description: "<em>Type</em> must be equal to <em>AWS::S3::Bucket</em>"
  - description: "<em>BucketName</em> must start with <em>opservatory-s3-public-</em> and be unique"
  - description: "<em>AccessControl</em> must be equal to <em>PublicReadWrite</em>"
  - description: "<em>CorsConfiguration</em> must contain an object <em>CorsRules</em>"
  - description: "<em>CorsRules</em> must contain an array of objects"
  - description: "<em>AllowedHeaders</em> must be equal to <em>*</em>"
  - description: "<em>AllowedMethods</em> must be equal to <em>[ \"POST\", \"GET\", \"PUT\", \"DELETE\", \"HEAD\" ]</em>"
  - description: "<em>AllowedOrigins</em> must be equal to <em>*</em>"
level: 0
duration: 15
status: 1
photo: "Storage_AmazonS3_LARGE.png"
start_point: |
  {
    "Resources" : {
      "publicS3" : {
        "Type" : "AWS::S3::Bucket",
        "Properties" : {
          "CorsConfiguration" : {
            "CorsRules" : [
              {
                "AllowedHeaders" : [ "*" ],
                "AllowedMethods" : [ "POST", "GET", "PUT", "DELETE", "HEAD" ],
                "AllowedOrigins" : [ "*" ]
              }
            ]
          }
        }
      }
    }
  }
deployable: true

